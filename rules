// NATURALS
let zero
let succ
let one = succ zero
let two = succ one
let three = succ two
let four = succ three
let five = succ four
let six = succ five

let add_nat
add_nat x zero = x
add_nat x (succ y) = add_nat (succ x) y

let mul_nat
mul_nat x zero = zero
mul_nat x (succ y) = add_nat (mul_nat x y) x

let hyper_nat
hyper_nat zero _ = succ
hyper_nat one = add_nat
hyper_nat two = mul_nat
hyper_nat (succ n) x zero = one
hyper_nat (succ n) x (succ y) = hyper_nat n x (hyper_nat (succ n) x y) 

let pow_nat = hyper_nat three

// BOOLEAN LOGIC
// Implementation is just {+, *} over {0, 1}

let false
let true

let xor
xor true false = true
xor false true = true
xor x x = false

let and
and true true = true
and false x = false
and x false = false

let not
not x = xor x true

let or
or x y = xor (xor x y) (and x y)

let ident
ident x = x

let if
if true x y = x
if false x y = y

// LIST
let cons
let nil
let fold
fold fun acc nil = acc
fold fun acc (cons head tail) = fold fun (fun acc head) tail

let sum
sum list = fold add_nat zero list

let filter
filter fun nil = nil
filter fun (cons head tail) = if (fun head) (cons head (filter fun tail)) (filter fun tail)

let my_list = (cons one (cons two (cons three nil))) // [1, 2, 3]

let eq
eq x x = true
eq (succ x) zero = false
eq (succ x) (succ y) = eq x y
eq zero (succ y) = false

let compose
compose from to x = to (from x)

? sum my_list // 6

let filtered_list = filter (compose (eq two) not) my_list
? filtered_list // [1, 3]

? sum filtered_list // 4